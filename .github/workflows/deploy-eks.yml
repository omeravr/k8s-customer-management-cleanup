name: EKS Deployment

on:
  workflow_dispatch:  # Manual trigger

jobs:
  deploy:
    runs-on: self-hosted

    steps:
      - name: Checkout the repository
        uses: actions/checkout@v2

      - name: Setup Node.js (Install Node.js)
        uses: actions/setup-node@v2
        with:
          node-version: '14'

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Navigate to Terraform configuration
        working-directory: terraform/eks-managed-node-group
        run: pwd  # Prints the current directory to ensure we're in the right place

      - name: Create terraform.tfvars file
        working-directory: terraform/eks-managed-node-group
        run: |
          echo 'aws_region       = "${{ secrets.AWS_REGION }}"' > terraform.tfvars
          echo 'cluster_name     = "${{ secrets.CLUSTER_NAME }}"' >> terraform.tfvars
          echo 'cluster_version  = "${{ secrets.CLUSTER_VERSION }}"' >> terraform.tfvars
          echo 'vpc_id           = "${{ secrets.VPC_ID }}"' >> terraform.tfvars
          echo 'subnet_ids       = ["${{ secrets.SUBNET_IDS }}"]' >> terraform.tfvars
          echo 'lb_subnet_ids    = ["${{ secrets.LB_SUBNET_IDS }}"]' >> terraform.tfvars
          echo 'instance_types   = ["${{ secrets.INSTANCE_TYPES }}"]' >> terraform.tfvars
          echo 'lb_internal      = "${{ secrets.LB_INTERNAL }}"' >> terraform.tfvars

      - name: Terraform Init
        working-directory: terraform/eks-managed-node-group
        run: terraform init

      - name: Terraform Plan
        working-directory: terraform/eks-managed-node-group
        run: terraform plan

      - name: Terraform Apply
        working-directory: terraform/eks-managed-node-group
        run: terraform apply -auto-approve

      - name: Update kubeconfig for EKS
        run: aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name ${{ secrets.CLUSTER_NAME }}

      - name: Install AWS Load Balancer Controller
        run: |
          eksctl create iamserviceaccount \
            --cluster ${{ secrets.CLUSTER_NAME }} \
            --namespace kube-system \
            --name aws-load-balancer-controller \
            --attach-policy-arn ${{ secrets.AWS_LBC_POLICY_ARN }} \
            --approve

          helm install aws-load-balancer-controller eks/aws-load-balancer-controller \
            -n kube-system \
            --set clusterName=${{ secrets.CLUSTER_NAME }} \
            --set serviceAccount.create=false \
            --set serviceAccount.name=aws-load-balancer-controller \
            --set region=${{ secrets.AWS_REGION }} \
            --set vpcId=${{ secrets.VPC_ID }}

      - name: Deploy NGINX App
        run: |
          kubectl apply -f app/test/nginx-deployment.yaml

      - name: Create TargetGroupBinding for NGINX App
        run: |
          TG_ARN=$(aws elbv2 describe-target-groups --query "TargetGroups[?TargetGroupName=='eks-nlb-tg'].TargetGroupArn" --output text)
          sed -i "s#TARGET_GROUP_ARN_PLACEHOLDER#${TG_ARN}#g" app/test/targetgroupbinding.yaml
          kubectl apply -f app/test/targetgroupbinding.yaml


  # Separate cleanup job for destruction if the deployment job fails
  cleanup:
    runs-on: self-hosted
    needs: deploy
    if: failure()
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Navigate to Terraform configuration
        working-directory: terraform/eks-managed-node-group
        run: pwd

      - name: Terraform Destroy on Failure
        working-directory: terraform/eks-managed-node-group
        run: terraform destroy -auto-approve
